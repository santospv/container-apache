pipeline{
    agent any
    environment {
        PROJECT_ID     = 'pvs-devops-iac'
        CLUSTER_NAME   = 'pvs-devops-iac-gke'
        LOCATION       = 'us-south1-c'
        CREDENTIALS_ID = 'gcp-gke'
        REGISTRY       = 'santospv08/app-apache-docker'
        REGISTRY2      = 'registry.hub.docker.com/santospv08/app-apache-docker'
        $LAST24H       = 'until=24h'  
    }

    stages {
        stage ('Initial'){
            steps{
                echo 'Iniciando a Pipeline'
            }
        }
        stage ('Build Image'){
            steps{
                echo 'Buildando a Imagem'
                script{
                    dockerapp = docker.build("santospv08/app-apache-docker:${env.BUILD_ID}", ' .')
                }
            }
        }
        stage ('Push Image'){
            steps{
                echo 'Subindo a Imagem'
                script{
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub'){
                        dockerapp.push("latest")
                        dockerapp.push("${env.BUILD_ID}")
                    }
                }
                
            }
        }
        stage('Deploy to GKE') {
            steps{
                sh "sed -i 's/{{tag}}/${env.BUILD_ID}/g' deployment.yaml"
                step(
                    [$class: 'KubernetesEngineBuilder', 
                        projectId: env.PROJECT_ID, 
                        clusterName: env.CLUSTER_NAME, 
                        location: env.LOCATION, 
                        manifestPattern: 'deployment.yaml', 
                        namespace: 'ingress',
                        credentialsId: env.CREDENTIALS_ID, 
                        verifyDeployments: true
                    ]
                )
            }
        }
        stage('Clean build Images Jenkins Server') { 
            steps { 
                sh "docker rmi $REGISTRY:$BUILD_ID" 
                sh "docker rmi $REGISTRY2:$BUILD_ID" 
                sh "docker image prune -a --force"
            }
        }
    }
}
